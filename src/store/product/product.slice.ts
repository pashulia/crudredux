import {
    createSlice,
    PayloadAction,
} from '@reduxjs/toolkit';

import { ProductModel } from '../../models/product.model';

interface ProductStateModel {
    products: ProductModel[];
}

const initialState: ProductStateModel = {
    products: [],
};
// Создание среза productSlice
// createSlice - это функция из библиотеки Redux Toolkit, предоставляющей удобные инструменты
// для управления состоянием и упрощения процесса создания хранилища в Redux.
// createSlice позволяет создавать срезы (slices) хранилища, включая редюсеры, действия
// и исходное состояние, в более компактной и декларативной форме.
// Преимущества использования createSlice включают в себя:
// Автоматическое создание действий и редюсеров, что уменьшает дублирование кода.
// Удобное именование действий и редюсеров, связанных с конкретным срезом состояния.
// Возможность создания срезов состояния без явного определения редюсера и экшенов.
// После создания среза можно использовать его в хранилище Redux вместе с другими срезами,
// чтобы управлять состоянием приложения.
const productSlice = createSlice({
    // имя среза 
    name: 'product',
    // начальное состояние среза
    initialState,
    // объект, содержащий действия для изменения состояния
    reducers: {
        // действие принимает текущее состояние state и action, которое содержит массив ProductModel[]
        // PayloadAction - это тип, предоставляемый Redux Toolkit, который представляет собой действие
        // (action) с полезной нагрузкой (payload). В Redux, действия - это объекты, которые описывают
        // изменения состояния в хранилище. Действия обычно содержат поле "type", которое указывает на
        // тип действия, и поле "payload", которое содержит данные, связанные с этим действием.
        // В Redux Toolkit, PayloadAction представляет собой тип действия с конкретной структурой и
        // предназначен для использования внутри createSlice, чтобы определить структуру действий.
        // Он обеспечивает более строгую типизацию и автогенерацию действий.
        setProductsAction: (state, action: PayloadAction<ProductModel[]>) => {
            // массив продуктов обновляется с использованием action.payload
            state.products = action.payload;
        },
    },
});
// экспортируем действие, которое будет использоваться для обновления состояния
export const { setProductsAction } = productSlice.actions;
// редюсер, который будет объединен в корневом редюсере при настройке хранилища Redux
export default productSlice.reducer;

// Этот срез позволяет вам использовать setProductsAction для обновления состояния Redux
// с новым массивом продуктов. Когда это действие диспетчеризируется, Redux Toolkit
// автоматически обрабатывает обновление состояния, и компоненты, подписанные на изменения
// этого состояния, будут обновлены.